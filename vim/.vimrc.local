" highlight current line
set cursorline

" keyboard shortcuts
inoremap jk <ESC>
cnoremap jk <ESC>
nmap ; :
vmap ; :

" gui settings
if ((&t_Co == 256 || has('gui_running')) && $TERM_PROGRAM == 'iTerm.app')
  colorscheme solarized
else
  set t_Co=16
  set background=light
  colorscheme solarized
endif

" hotkeys
nmap <leader>a :%
nmap <leader>c :noh<CR>
nmap <leader>w :%s/<c-r><c-w>/
nmap <leader>r :%s/
nmap <leader>s :s/
nmap <leader>l $bC
nmap <leader>ig :%s/\<it("/ignore("/<CR>
nmap <leader>it :%s/\<ignore("/it("/<CR>
vmap <leader>y "+y

" last buffer
nmap <space><space> :b#<cr>

" tabs! use 2 spaces by default, we can override for random file types
set shiftwidth=2 expandtab tabstop=2 softtabstop=2
au BufEnter *.php set shiftwidth=4 tabstop=4 softtabstop=4 expandtab

" line length markes
set colorcolumn=80,100,120
au FileType gitcommit set colorcolumn=74

" truncate whitespace on save
autocmd BufWritePre * :%s/\s\+$//e

" modes
nmap <leader>p :set invpaste paste?<CR>
nmap <leader>iw :set invwrap wrap?<CR>
set showmode

" allow changed buffers to be hidden
set hidden

" highlight current line
set cursorline

" scala unicode
au FileType scala iabbrev => ⇒
au FileType scala iabbrev <- ←
au FileType scala iabbrev -> →

" scala formatter (work pc)
let g:scala_sort_across_groups=1
let g:scala_first_party_namespaces='\(atm\|co\.movio\|clients\|bonc\)'
au BufEnter *.scala setl formatprg=java\ -jar\ $HOME/opt/scalariform.jar\ -f\ -q\ -p=$HOME/code/dev-tools/eclipse/scala-formatter.properties\ --stdin\ --stdout
nmap <leader>m mfgggqG`f

" save the state of files when closing
autocmd BufWinLeave *.* mkview
autocmd BufWinEnter *.* silent loadview

" vimdiff
nmap <leader>dr :diffg RE<CR>
nmap <leader>dl :diffg LO<CR>
nmap <leader>du :diffupdate<CR>

" go
let g:go_fmt_command = "goimports"

function! s:go_build_and_test()
  let l:listtype = go#list#Type("quickfix")
  call go#cmd#Build(0)
  if empty(go#list#Get(l:listtype))
    call go#cmd#Test(0, 0)
    "call go#cmd#Test(0, 1)
    "if empty(go#list#Get(l:listtype))
    "  call go#coverage#Buffer(0)
    "endif
  endif
endfunction
au BufWritePost *.go call s:go_build_and_test()

au FileType go set nolist
"au FileType go nmap <leader>gr <Plug>(go-run)
au FileType go nmap <leader>gg <Plug>(go-build)
au FileType go nmap <leader>gt <Plug>(go-test)
au FileType go nmap <leader>gc <Plug>(go-coverage)
au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
au FileType go nmap <Leader>gb <Plug>(go-doc-browser)
au FileType go nmap <Leader>gs <Plug>(go-implements)
au FileType go nmap <Leader>gi <Plug>(go-info)
au FileType go nmap <Leader>ge <Plug>(go-rename)

" explorer
nmap <leader>n :Lexplore<CR>
let g:netrw_liststyle=3

" make j/k move between physical lines and not logical lines
nmap j gj
nmap k gk
vmap j gj
vmap k gk

" vim -b : edit binary using xxd-format!
augroup Binary
  au!
  au BufReadPre  *.bin let &bin=1
  au BufReadPost *.bin if &bin | %!xxd
  au BufReadPost *.bin set ft=xxd | endif
  au BufWritePre *.bin if &bin | %!xxd -r
  au BufWritePre *.bin endif
  au BufWritePost *.bin if &bin | %!xxd
  au BufWritePost *.bin set nomod | endif
augroup END
